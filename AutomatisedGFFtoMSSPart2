#!/usr/bin/python
# coding: UTF-8

import sys
from Bio import SeqIO
from Bio import Seq
from BCBio import GFF
import fileinput
import re
import csv
import pandas as pd

#------------------------------------------
# Second part of the script: fixing translation errors -> fixing syntax erros
# Translation errors

# fixes the "First codon is not a start codon error"
def first(location):
    rewrite = location.split('(')
    if (rewrite[0] == "complement"): # complement(....) and complement(join(....)) case , fix: (xxx..xxx,xxx..>xxx) (including complement/complemntjoin)
        adding_sign = location.rsplit("..",1) 
        location = adding_sign[0] + "..>" + adding_sign[1]

    else : # (if rewrite[0] != complement)
        if (rewrite[0] == "join"):  # join(....) case , fix: (<xxx..xxx,xxx..xxx) (including join)
            location = "join(<" + rewrite[1]
        else :
            location = "<" + location # (....) case , fix: (<xxx..xxx,xxx..xxx)
    return location

# fixes the "Final codon is not a stop codon error"
def final(location):
    rewrite = location.split('(')
    if (rewrite[0] == "complement"): 
        if (rewrite[1] == "join"): # complement(join(....)) case , fix: (<xxx..xxx,xxx..xxx) (including complementjoin)
            location = "complement(join(<" + rewrite[2]
        else : # complement(....) case , fix: (<xxx..xxx,xxx..xxx) (including complement)
            location = "complement(<" + rewrite[1]

    else : # (if rewrite[0] != complement) # join(....) and (....) case , fix: (xxx..xxx,xxx..>xxx) (including join or not)
        adding_sign = location.rsplit("..",1) 
        location = adding_sign[0] + "..>" + adding_sign[1]

    return location



args = sys.argv

filename = "errors_dup_bef20"    # errors file
fileR = open(filename, "r")

filename = "what_to_fix"    # generated file with information how to solve things
fileW = open(filename, "w")




for line in fileR:
  if line[0] == '>': # new location of error
    location = line.split()[1]
    oldLocation = location
    while line[0:2] != "//": # until errors for this location dont end
        line = fileR.readline()
        if (line.split()[0] == "TC0017:ER2:"): # first codon error
            location = first(location)
        if (line.split()[0] == "TC0018:ER2:"): # final codon error
            location = final(location)
    uninterrupted = oldLocation + ";" + location + "\n" # write to fix file in "bad_location;location_fix" manner
    fileW.write(uninterrupted)


fileR.close()
fileW.close()

        


with fileinput.FileInput("mss_duplicates_20", inplace=True) as file:
    x = 0 # position in replacement file
    for line in file: # for line in mss file
            splitted = re.split(r'\t+', line) # splitted line by tabs
            flag = 0 #flag to check if replacement in the line is being made
            if splitted[1] == "CDS": # if given line is CDS of mRNA header
                with open("what_to_fix") as f: # with open file with things that need to be fixed
                    for linee in f.readlines()[x:]: # opening the file from a new position as to not overwrite the fixed errors
                        replacement = linee.split(";") # version giving an error and the new version are separated my a ';' in a file
                        r1 = replacement[0] # old version
                        r2 = replacement[1] # new version
                        if r1 == splitted[2]: # if location is approptiate
                            x += 1 # new file opening position
                            flag = 1 # replacement needs to be done                           ###
                            savedR1 = r1.rstrip('\n') # stripping the line of the newline     ###
                            savedR2 = r2.rstrip('\n')                                         ###
                            break;
            if flag == 1 : print(line.replace(savedR1,savedR2), end='') # replacement to be done ###
            else :  print(line, end = '') # no replacement



#---------------------------------------------------
# Syntax errors

filename = "mss_duplicates_20_re"
fileW = open(filename, "w")


with fileinput.FileInput("mss_duplicates_20") as file:
    for line in file:
        line = re.sub(r"\(\w+\s\w+.+\)","",line) # remove species names
        line = re.sub(r"\\","",line) # remove backslashes
        match  = re.search(r"(Scaffold)([0-9]+)",line) 
        if match:
            replacement = "BOPP0" + str(int(match.group(2)) + 1000000) 
            line = re.sub(match.group(0),replacement,line) # replace "scaffold" with names appointed by the DDBJ
        fileW.write(line)



fileW.close()
